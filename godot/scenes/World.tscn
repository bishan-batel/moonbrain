[gd_scene load_steps=12 format=3 uid="uid://dh8yhornwl7bg"]

[ext_resource type="PackedScene" uid="uid://vs442rcjp7rw" path="res://scenes/player/Player.tscn" id="1_4atwn"]

[sub_resource type="Shader" id="Shader_x2ker"]
code = "shader_type sky;

// Comment this if you don't want to use star twinke. However, if you do want to keep it,
// I suggest you to set the sky process mode to High-Quality Incremental or Real-Time,
// as star twinkling may greatly impact performance.
#define USE_TWINKLE

group_uniforms sky;
uniform vec3 sky_color: source_color = vec3(0.03, 0.05, 0.11);

group_uniforms stars;
uniform vec3 star_base_color: source_color = vec3(0.8, 1.0, 0.3);
uniform float star_hue_offset: hint_range(0., 1.) = 0.6;
uniform float star_intensity: hint_range(0., 0.2) = 0.08;
#ifdef USE_TWINKLE
uniform float star_twinkle_speed: hint_range(0.0, 2.0) = 0.8;
uniform float star_twinkle_intensity: hint_range(0.0, 1.0) = 0.2;
#endif

group_uniforms layers;
uniform float layer_scale: hint_range(0., 60.) = 20.;
uniform float layer_scale_step: hint_range(0., 40.) = 10.;
uniform int layers_count: hint_range(0, 12) = 3;

// Hue credit:
// The MIT License
// Copyright © 2024 DigvijaysinhGohil
// https://github.com/DigvijaysinhGohil/Godot-Shader-Lib

vec3 hue(vec3 input, float offset, int range_index) {
	// RGB to HSV
	vec4 k = vec4(0., -1./3., 2./3., -1.);
	vec4 p = mix(vec4(input.bg, k.wz), vec4(input.gb, k.xy), step(input.b, input.g));
	vec4 q = mix(vec4(p.xyw, input.r), vec4(input.r, p.yzx), step(p.x, input.r));
	float d = q.x - min(q.w, q.y);
	float e = 1.e-10;
	vec3 hsv = vec3(abs(q.z + (q.w - q.y) / (6. * d + e)), d / (q.x + e), q.x);

	offset = (range_index == 0) ? offset / 360. : offset;
	float hue = hsv.x + offset;
	if (hue < 0.) {
		hsv.x = hue + 1.;
	} else if (hue > 1.) {
		hsv.x = hue - 1.;
	} else {
		hsv.x = hue;
	}

	// HSV to RGB
	vec4 k2 = vec4(1., 2./3., 1./3., 3.);
	vec3 p2 = abs(fract(hsv.xxx + k2.xyz) * 6. - k2.www);
	vec3 rgb = hsv.z * mix(k2.xxx, clamp(p2 - k2.xxx, 0., 1.), hsv.y);
	return rgb;
}

// Voronoi method credit:
// The MIT License
// Copyright © 2013 Inigo Quilez
// https://www.shadertoy.com/view/ldl3Dl

vec3 hash(vec3 x) {
	x = vec3(dot(x, vec3(127.1,311.7, 74.7)),
			 dot(x, vec3(269.5,183.3,246.1)),
			 dot(x, vec3(113.5,271.9,124.6)));
	return fract(sin(x) * 43758.5453123);
}

vec2 voronoi(in vec3 x){
	vec3 p = floor(x);
	vec3 f = fract(x);

	float res = 100.;
	float id = 0.;

	for (float k = -1.; k <= 1.; k += 1.) {
		for (float j = -1.; j <= 1.; j += 1.) {
			for (float i = -1.; i <= 1.; i += 1.) {
				vec3 b = vec3(i, j, k);
				vec3 r = vec3(b) - f + hash(p + b);
				float d = dot(r, r);
				if (d < res) {
					res = d;
					id = dot(p + b, vec3(0., 57., 113.));
				}
		    }
		}
	}

	return vec2(sqrt(res), id);
}

void sky() {
	COLOR = sky_color;

	for (int i = 0; i < layers_count; i++) {
		vec3 pos = EYEDIR * (layer_scale + float(i) * layer_scale_step);
		vec2 layer = voronoi(pos);

		vec3 rand = hash(vec3(layer.y));

		#ifdef USE_TWINKLE
			float twinkle = sin(TIME * PI * star_twinkle_speed + rand.x * TAU);
			twinkle *= star_twinkle_intensity;
			float star = smoothstep(star_intensity + star_intensity * twinkle, 0., layer.x);
		#else
			float star = smoothstep(star_intensity, 0., layer.x);
		#endif

		vec3 star_color = star * hue((COLOR + star_base_color), rand.y * star_hue_offset, 1);

		COLOR += star_color;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_41m6u"]
shader = SubResource("Shader_x2ker")
shader_parameter/sky_color = Color(0.00969826, 0.0164493, 0.0481485, 1)
shader_parameter/star_base_color = Color(0.799606, 0.974356, 0.721902, 1)
shader_parameter/star_hue_offset = 0.328
shader_parameter/star_intensity = 0.08
shader_parameter/star_twinkle_speed = 0.35
shader_parameter/star_twinkle_intensity = 0.2
shader_parameter/layer_scale = 20.0
shader_parameter/layer_scale_step = 10.0
shader_parameter/layers_count = 3

[sub_resource type="Sky" id="Sky_eiqy8"]
sky_material = SubResource("ShaderMaterial_41m6u")

[sub_resource type="Environment" id="Environment_qucon"]
background_mode = 2
sky = SubResource("Sky_eiqy8")
sky_rotation = Vector3(-6.28319, 0, 0)
ambient_light_source = 2
ambient_light_color = Color(1, 1, 1, 1)
ambient_light_energy = 0.1
tonemap_mode = 2
glow_enabled = true
glow_levels/1 = 4.92
glow_levels/6 = 1.54
glow_normalized = true
glow_intensity = 1.63
glow_strength = 0.38
glow_blend_mode = 1
glow_hdr_threshold = 1.56

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_pwe2w"]
shading_mode = 0
albedo_color = Color(4.93, 4.16, 2.45, 1)
disable_receive_shadows = true

[sub_resource type="SphereShape3D" id="SphereShape3D_rvmw1"]
radius = 8.109

[sub_resource type="SphereShape3D" id="SphereShape3D_j1cgp"]
radius = 200.0

[sub_resource type="GDScript" id="GDScript_57ftr"]
script/source = "extends Timer


func _on_timeout() -> void:
	var sphere: CSGSphere3D = CSGSphere3D.new()
	
	sphere.radius = 10
	$\"../../\".add_child(sphere)
	sphere.position = $\"../../\".to_local($\"..\".global_position)
"

[sub_resource type="PhysicsMaterial" id="PhysicsMaterial_4y2g2"]
bounce = 1.0

[sub_resource type="SphereShape3D" id="SphereShape3D_p7egi"]
radius = 80.0

[node name="World" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_qucon")

[node name="Player" parent="." instance=ExtResource("1_4atwn")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 512.509, 1582.86, 2099.18)

[node name="Sun" type="GravityBody" parent="."]
mass = 50000.0
angular_damp_mode = 1

[node name="CSGSphere3D3" type="CSGSphere3D" parent="Sun"]
transform = Transform3D(6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0)
cast_shadow = 0
use_collision = true
collision_mask = 0
radius = 100.0
radial_segments = 30
rings = 30
material = SubResource("StandardMaterial3D_pwe2w")
metadata/_edit_lock_ = true

[node name="OmniLight" type="OmniLight3D" parent="Sun/CSGSphere3D3"]
light_color = Color(1, 0.876861, 0.607363, 1)
light_energy = 0.127
light_volumetric_fog_energy = 1.511
light_size = 200.0
light_specular = 2.113
light_cull_mask = 4293918721
shadow_enabled = true
shadow_bias = 4.426
shadow_normal_bias = 0.213
shadow_transmittance_bias = -5.703
omni_range = 6000.0
omni_attenuation = -0.466

[node name="CollisionShape3D" type="CollisionShape3D" parent="Sun"]
transform = Transform3D(6, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0)
shape = SubResource("SphereShape3D_rvmw1")
metadata/_edit_lock_ = true

[node name="GravityBody3" type="GravityBody" parent="."]
initial_vel = Vector3(600, 0, 0)
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 324.121, -15.9739, 5448.69)
mass = 1000.0
can_sleep = false
angular_damp_mode = 1

[node name="CollisionShape3D" type="CollisionShape3D" parent="GravityBody3"]
shape = SubResource("SphereShape3D_j1cgp")
metadata/_edit_lock_ = true

[node name="CSGSphere3D" type="CSGSphere3D" parent="GravityBody3/CollisionShape3D"]
transform = Transform3D(2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0)
radius = 100.0
radial_segments = 20
rings = 19
metadata/_edit_lock_ = true

[node name="Timer" type="Timer" parent="GravityBody3"]
wait_time = 0.4
autostart = true
script = SubResource("GDScript_57ftr")

[node name="Camera3D" type="Camera3D" parent="GravityBody3"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 2000, 0)
current = true
far = 10000.0

[node name="Moon" type="GravityBody" parent="GravityBody3"]
initial_vel = Vector3(600, 0, -160)
transform = Transform3D(0.999612, 0.0238885, 0.0143551, -0.0238807, 0.999715, -0.000712099, -0.014368, 0.000369013, 0.999897, -858.571, 0, 0)
mass = 10.0
physics_material_override = SubResource("PhysicsMaterial_4y2g2")
can_sleep = false
angular_velocity = Vector3(2.4761, -0.0690976, 0)
angular_damp_mode = 1

[node name="CollisionShape3D" type="CollisionShape3D" parent="GravityBody3/Moon"]
shape = SubResource("SphereShape3D_p7egi")
metadata/_edit_lock_ = true

[node name="CSGSphere3D" type="CSGSphere3D" parent="GravityBody3/Moon/CollisionShape3D"]
radius = 80.0
radial_segments = 20
rings = 19
metadata/_edit_lock_ = true

[node name="Timer" type="Timer" parent="GravityBody3/Moon"]
wait_time = 0.4
autostart = true
script = SubResource("GDScript_57ftr")

[node name="Orchestrator" type="Orchestrator" parent="." node_paths=PackedStringArray("sun") groups=["Orchestrator"]]
gravity_constant = 15000.0
sun = NodePath("../Sun")

[connection signal="timeout" from="GravityBody3/Timer" to="GravityBody3/Timer" method="_on_timeout"]
[connection signal="timeout" from="GravityBody3/Moon/Timer" to="GravityBody3/Moon/Timer" method="_on_timeout"]
